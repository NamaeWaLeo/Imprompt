// api.js (Main World에서 content.js와 함께 주입됨)

window.ImpromptAPI = window.ImpromptAPI || {};

window.ImpromptAPI.generatePromptFromImage = async function(imageUrl, apiKey, modelName) {
  console.log("ImpromptAPI (Main World): generatePromptFromImage called.");
  if (!apiKey) {
    throw new Error("Gemini API Key가 설정되지 않았습니다.");
  }
  if (!imageUrl) {
    throw new Error("이미지 URL이 유효하지 않습니다.");
  }

  const API_BASE_URL = "https://generativelanguage.googleapis.com/v1beta";
  const GEMINI_MODEL = modelName;

  const toBase64 = async url => {
    console.log("ImpromptAPI (Main World): Converting image to base64:", url);
    try {
      const response = await fetch(url, { mode: 'cors' });
      if (!response.ok) {
          throw new Error(`이미지 로드 HTTP 오류: ${response.status} ${response.statusText}`);
      }
      const blob = await response.blob();
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result.split(',')[1]);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
    } catch (error) {
      console.error("ImpromptAPI (Main World): Failed to convert image to base64:", error);
      if (error.message.includes("Failed to fetch") || error instanceof TypeError) {
          throw new Error("이미지 로드 중 네트워크 또는 CORS 오류가 발생했습니다. 해당 이미지는 처리할 수 없습니다.");
      }
      throw error;
    }
  };

  let base64EncodedImage;
  try {
    base64EncodedImage = await toBase64(imageUrl);
    console.log("ImpromptAPI (Main World): Image converted to base64 successfully.");
  } catch (error) {
    console.error("ImpromptAPI (Main World): Failed to prepare image:", error);
    throw error;
  }
  
  let mimeType = "image/jpeg";
  if (imageUrl.toLowerCase().endsWith(".png")) {
      mimeType = "image/png";
  } else if (imageUrl.toLowerCase().endsWith(".webp")) {
      mimeType = "image/webp";
  }


  const requestBody = {
    contents: [
      {
        parts: [
          { text: "이 이미지에 대한 상세한 stable diffusion 프롬프트를 생성해줘. 스타일, 색상, 분위기, 주요 객체, 배경 등을 포함하여 그림을 잘 묘사할 수 있는 키워드들을 나열하고, Stable Diffusion (NovelAI 또는 PixAI)에서 바로 사용할 수 있도록 쉼표로 구분된 형태로 제공해줘. 프롬프트는 75단어 이내로 간결하게 작성해줘. 예시: 'a majestic white tiger, intricate fur details, lush green jungle, golden hour lighting, cinematic, photorealistic, ultra detailed, 8k --ar 16:9 --style raw' 와 같이 출력해줘." },
          {
            inlineData: {
              mimeType: mimeType,
              data: base64EncodedImage
            }
          }
        ]
      }
    ],
    generationConfig: {
      temperature: 0.7,
      maxOutputTokens: 200
    }
  };

  try {
    console.log("ImpromptAPI (Main World): Calling Gemini API for generation...");
    const response = await fetch(
      `${API_BASE_URL}/models/${GEMINI_MODEL}:generateContent?key=${apiKey}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      }
    );

    const data = await response.json();

    if (!response.ok) {
      console.error("ImpromptAPI (Main World): Gemini API Error Response:", data);
      const errorMessage = data.error && data.error.message ? data.error.message : "알 수 없는 API 오류가 발생했습니다.";
      throw new Error(`Gemini API 오류: ${errorMessage}`);
    }

    if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0) {
      console.log("ImpromptAPI (Main World): Prompt generated successfully by Gemini API.");
      return data.candidates[0].content.parts[0].text;
    } else {
      console.warn("ImpromptAPI (Main World): No prompt generated by Gemini API:", data);
      throw new Error("프롬프트 생성에 실패했습니다. 유효한 응답을 받지 못했습니다. API 응답을 확인하세요.");
    }
  } catch (error) {
    console.error("ImpromptAPI (Main World): Error during Gemini API call:", error);
    if (error.name === 'TypeError' || error.message.includes("Failed to fetch")) {
      throw new Error(`API 호출 중 네트워크 오류가 발생했습니다: ${error.message}`);
    }
    throw error;
  }
};

window.ImpromptAPI.verifyApiKey = async function(apiKey, modelName = 'gemini-1.5-flash') {
    console.log("ImpromptAPI (Main World): verifyApiKey called.");
    if (!apiKey) {
      return { isValid: false, error: "API 키가 비어 있습니다." };
    }

    const API_BASE_URL = "https://generativelanguage.googleapis.com/v1beta";
    const testModel = modelName;

    const requestBody = {
      contents: [{ parts: [{ text: "ping" }] }]
    };

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10초 타임아웃

    try {
      const response = await fetch(
        `${API_BASE_URL}/models/${testModel}:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(requestBody),
          signal: controller.signal
        }
      );
      clearTimeout(timeoutId);

      let responseData;
      try {
          responseData = await response.clone().json();
      } catch (jsonError) {
          console.warn("ImpromptAPI (Main World): Failed to parse API verification response JSON:", jsonError);
          responseData = { error: { message: "API 응답 파싱 실패" } };
      }

      const isValid = response.ok || response.status === 429 || (response.status === 400 && responseData.error?.message.includes("quota"));
      
      let errorMessage = null;
      if (!isValid && !response.ok) { 
          errorMessage = responseData.error && responseData.error.message ? responseData.error.message : response.statusText || '알 수 없는 API 오류';
          console.warn("ImpromptAPI (Main World): API Key verification failed:", errorMessage);
      } else {
          console.log("ImpromptAPI (Main World): API Key verification successful.");
      }
      return { isValid: isValid, error: errorMessage || null };

    } catch (error) {
        console.error("ImpromptAPI (Main World): API Key verification network error:", error);
        if (error.name === 'AbortError') {
            return { isValid: false, error: 'API 확인 시간 초과. 네트워크 상태를 확인해주세요.' };
        }
        return { isValid: false, error: error.message || '네트워크 오류 또는 API 통신 문제' };
    }
};